plot <- ggplot(data, aes(x = Symbol, y = Enriched_Term, fill = value)) +
geom_tile(color = 'black') +
scale_fill_manual(values = c("up" = 'skyblue', "down" = 'indianred3')) +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.title.y = element_blank())
plotly_plot <- ggplotly(plot, height = 800, width = w) %>%
layout(
yaxis = list(
automargin = TRUE,
showgrid = TRUE,        # Ensure horizontal grid lines are shown
gridcolor = "lightgray", # Set grid line color
gridwidth = 1)
)
#----
return(list(plot, plotly_plot))
}
plot <- geneheatmap(res_clustered, c("SRC", "LYN", "YES1", "HCK", "BLK", "LCK", "CSK", "PTPN11", "GRB2", "SHC1", "CBL", "PIK3CA", "AKT1", "MAPK1", "MAPK3", "GAB2", "CRK", "SOS1", "RAC1", "CDC42", "NCK1", "CD19", "ITGB1", "SYK", "ZAP70", "CD45", "VAV1", "RASGRP1", "NFATC1", "STAT3"))
saveWidget(plot[[2]], 'plot.html')
browseURL('plot.html')
geneheatmap <- function(
data = NULL,
genes = NULL
){
#______________INPUT VALIDATION_____________
#----
if( is.null(data) ){
stop("no data input")
}
#Ensure required format is met
expected_names <- c("ID", "Term_Description", "Fold_Enrichment", "occurrence", "support",
"lowest_p", "highest_p", "non_Signif_Snw_Genes", "Up_regulated",
"Down_regulated", "all_pathway_genes", "num_genes_in_path", "Cluster", "Status")
if( length(intersect(expected_names, colnames(data))) < length(expected_names)) {
stop("The data is not the correct format")
}
#Check is a list of genes was passed
if( is.null(genes) ){
stop("try using a list of genes to plot")
}
#----
#______________DATA MANIPULATION____________
#----
#Change the all pathway gene lists generated by pathfindR to a list of individual gene names
data <- data %>%
mutate(gene_list = lapply(all_pathway_genes,
function(x) trimws(unlist(strsplit(x, ",")))))
#Initialize a data frame that will hold the plotable information
tofilter <- data %>% filter(ID == "INITIALIZE")
#Select any rows of data where any genes in the seached gene list appear
tofilter <- data %>% filter(map_lgl(gene_list, ~ any(.x %in% genes)))
#To plot the data there must be at least 2 pathways, if 2 pathways are not present additional data will be
#added until there is 10 rows
if(nrow(tofilter) < 2){
print("your genes did not appear in enough pathways, plot will be populated with top ten pathways")
data <- data %>% arrange(desc(round(Fold_Enrichment, digits=2)), lowest_p)
filtered <- rbind(tofilter, head(data, 10)) %>% distinct()
}else{
filtered <- tofilter
}
#Remove the no longer needed column
filtered <- filtered %>% select(-gene_list)
#Reduce to a max of 50 pathways for readability
if(nrow(filtered) > 50 ){
print("first 50 pathways will be displayed")
num_Terms <- 50
}else{
num_Terms <- nrow(filtered)
}
#Use the pathfindR function to retrieve plot data to make our own plot
dummy <- term_gene_heatmap(filtered, num_terms = num_Terms, use_description = TRUE)
data <- dummy$plot_env$term_genes_df
rm(dummy)
#Filtered to searched genes
data <- data %>% filter(Symbol %in% genes)
#Remove bad rows
data <- data %>% drop_na()
if(nrow(data) < 1){
stop("not enough data to plot")
}
w <- nrow(data %>% distinct(Symbol)) * 85
#----
#______________CREATE THE PLOT______________
#----
plot <- ggplot(data, aes(x = Symbol, y = Enriched_Term, fill = value)) +
geom_tile(color = 'black') +
scale_fill_manual(values = c("up" = 'skyblue', "down" = 'indianred3')) +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.title.y = element_blank())
plotly_plot <- ggplotly(plot, height = 800, width = w) %>%
layout(
yaxis = list(
automargin = TRUE,
showgrid = TRUE,        # Ensure horizontal grid lines are shown
gridcolor = "lightgray", # Set grid line color
gridwidth = 1)
)
#----
return(list(plot, plotly_plot))
}
plot <- geneheatmap(res_clustered, c("SRC", "LYN", "YES1", "HCK", "BLK", "LCK", "CSK", "PTPN11", "GRB2", "SHC1", "CBL", "PIK3CA", "AKT1", "MAPK1", "MAPK3", "GAB2", "CRK", "SOS1", "RAC1", "CDC42", "NCK1", "CD19", "ITGB1", "SYK", "ZAP70", "CD45", "VAV1", "RASGRP1", "NFATC1", "STAT3"))
saveWidget(plot[[2]], 'plot.html')
browseURL('plot.html')
setwd("C:/Users/lucas/RStudio Projects/BioVis")
devtools::document()
devtools::document()
setwd("C:/Users/lucas/RStudio Projects/BioVis")
git add .
plotly_plot <- ggplotly(plot, height = 800, width = w) %>%
layout(
yaxis = list(
automargin = TRUE,
showgrid = TRUE,        # Ensure horizontal grid lines are shown
gridcolor = "lightgray", # Set grid line color
gridwidth = 1)
)
return(list(plot, plotly_plot))
setwd("C:/Users/lucas/RStudio Projects")
#----
library(dplyr)
library(plyr)
library(readxl)
library(tidyr)
library(dplyr)
library(pathfindR)
library(purrr)
library(ggplot2)
library(plotly)
library(cowplot)
library(htmlwidgets)
#Set up data
#---
data <- read.csv("C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/TestData/DEG_CORRECTED_FILTERED_DIM17823_14.csv")
head(max(data$P.val))
imp <- data %>% select(gene_name, padj, log2FoldChange)
ab <- data[,(ncol(data)-6):(ncol(data))]
ab <- ab %>% tibble::column_to_rownames('gene_name')
head <- c('Gene_symbol', 'P.val', 'logFC')
colnames(imp) <- head
#---
data <- imp
abundancedata <- ab
rm(ab, imp, head)
head(data)
head(abundancedata)
#sort data
#---
abundancedata$Gene_symbol <- rownames(abundancedata)
abundancedata <- abundancedata[,c(7, 1:6)]
abundancedata$p <- data$P.val
abundancedata <- abundancedata %>%drop_na()
data <- data[,c(1,3,2)] %>% drop_na()
#PathfindR setup ---
kegg <- plyr::ldply(pathfindR.data::kegg_genes, data.frame) %>%
mutate(num_genes_in_path = 1) %>%
dplyr::group_by(.data$.id) %>%
dplyr::summarize(X..i.. = paste0(.data$X..i.., collapse = ", "), num_genes_in_path = sum(num_genes_in_path))
names(kegg)[1] <- "ID"
names(kegg)[2] <- "all_pathway_genes"
print(head(kegg))
#---
#Run pathfinder
#---
head(min(data$P.val))
res <- run_pathfindR(data,
pin_name_path = "KEGG",
enrichment_threshold = 0.05,
iterations = 25,
list_active_snw_genes = TRUE)
res <- left_join(res, kegg)
#---
res_clustered <- cluster_enriched_terms(res,
plot_dend = TRUE,
plot_clusters_graph = TRUE)
print(res_clustered$Status)
Repro_samples <- res_clustered %>%
filter(Status = "Representative")
Repro_samples <- res_clustered %>%
filter(Status == "Representative")
print(Repro_samples)
shiny::runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
shiny::runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
shiny::runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
setwd("C:/Users/lucas/VBRN 2024/TestData")
md <- read.csv('Example_Meta_Data.csv')
setwd("C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/TestData/DEGhalfwayCorrectFiles")
shit <- read.csv('DEG_PreFiltered_DIM17823_14.csv')
setwd("C:/Users/lucas/RStudio Projects")
library(pheatmap)
library(dplyr)
head(shit)
head(md)
md.copy <- md
shit.copy <- shit
names(shit)
names <- names(shit)[9:14]
names
names
shit$sample <- names
md$sample <- names
md <- md %>% tibble::column_to_rownames(sample)
View(md)
View(md)
md
md <- data.frame(sample = md$sample, cond = c("T0", "T0", "T0", "T96", "T96", "T96"))
md
md <- md %>% tibble::column_to_rownames('sample')
md
shit
head(shit)
counts <- shit[, 9:14]
counts
head(counts)
cor(counts)
cor_mat <- cor(counts)
pheatmap(cor_mat)
pheatmap(cor_mat, angle_col = "45")
pheatmap(cor_mat, angle_col = "45", name = "Correlation")
pheatmap(cor_mat, angle_col = "45", name = "Correlation")
pheatmap(cor_mat, angle_col = "45", main = "Correlation")
pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md)
pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md)
pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md)
pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15)
pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 15)
pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 50)
pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 25)
pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 40)
pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 80)
pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 450 / nrow(cor_mat))
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 450 / nrow(cor_mat))
View(x)
x$gtable$grobs[[7]]
view(x$gtable$grobs[[7]])
print(x$gtable$grobs[[7]])
x$gtable$layout
legend_index <- which(p$gtable$layout$name == "legend")
legend_index <- which(x$gtable$layout$name == "legend")
legend <- x$gtable$grobs[[legend_index]]
legend
View(legend)
print(legend)
plot(legend)
legend$children[[1]]$gp <- gpar(fontsize = 14)  # Set the desired font size
legend$children[[2]]$widths <- unit(1, "cm")  # Increase the box width
library(grid)
legend$children[[1]]$gp <- gpar(fontsize = 14)  # Set the desired font size
legend$children[[2]]$widths <- unit(1, "cm")  # Increase the box width
legend$children[[2]]$heights <- unit(1, "cm") # Increase the box height
p$gtable$grobs[[legend_index]] <- legend
p <- x$gtable$grobs[[legend_index]] <- legend
p
legend$children[[1]]$gp <- gpar(fontsize = 75)  # Set the desired font size
legend$children[[2]]$widths <- unit(1, "cm")  # Increase the box width
legend$children[[2]]$heights <- unit(1, "cm") # Increase the box height
x <- x$gtable$grobs[[legend_index]] <- legend
x
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 450 / nrow(cor_mat))
legend_index <- which(x$gtable$layout$name == "legend")
legend <- x$gtable$grobs[[legend_index]]
legend$children[[1]]$gp <- gpar(fontsize = 75)  # Set the desired font size
legend$children[[2]]$widths <- unit(1, "cm")  # Increase the box width
legend$children[[2]]$heights <- unit(1, "cm") # Increase the box height
x
x
x$gtable$grobs[[legend_index]] <- legend
x
legend$children[[1]]$gp <- gpar(fontsize = 15)  # Set the desired font size
legend$children[[2]]$widths <- unit(1, "cm")  # Increase the box width
legend$children[[2]]$heights <- unit(1, "cm") # Increase the box height
x$gtable$grobs[[legend_index]] <- legend
x
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 450 / nrow(cor_mat))
legend_index <- which(x$gtable$layout$name == "legend")
legend <- x$gtable$grobs[[legend_index]]
legend$children[[1]]$gp <- gpar(fontsize = 15)  # Set the desired font size
legend$children[[2]]$widths <- unit(1, "cm")  # Increase the box width
legend$children[[2]]$heights <- unit(1, "cm") # Increase the box height
x$gtable$grobs[[legend_index]] <- legend
x
View(legend)
View(x)
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 450 / nrow(cor_mat))
legend_index <- which(x$gtable$layout$name == "legend")
legend <- x$gtable$grobs[[legend_index]]
View(legend)
legend$children[[1]]$gp <- gpar(fontsize = 15)  # Set the desired font size
legend$children[[2]]$widths <- unit(1, "cm")  # Increase the box width
legend$children[[2]]$heights <- unit(1, "cm") # Increase the box height
legend$children[[1]]$gp <- gpar(fontsize = 100)  # Set the desired font size
legend$children[[2]]$widths <- unit(1, "cm")  # Increase the box width
legend$children[[2]]$heights <- unit(1, "cm") # Increase the box height
x$gtable$grobs[[legend_index]] <- legend
x
x$gtable$grobs[[10]] <- legend
x
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 450 / nrow(cor_mat))
legend_index <- which(x$gtable$layout$name == "legend")
legend <- x$gtable$grobs[[legend_index]]
legend$children[[1]]$gp <- gpar(fontsize = 100)  # Set the desired font size
x$gtable$grobs[[10]] <- legend
x
legend$children[[1]]$gp <- gpar(fontsize = 2)  # Set the desired font size
x$gtable$grobs[[10]] <- legend
x
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 450 / nrow(cor_mat))
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 3, cellwidth = 450 / nrow(cor_mat))
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 45, cellwidth = 450 / nrow(cor_mat))
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 2, cellwidth = 450 / nrow(cor_mat),
)
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 10, cellwidth = 450 / nrow(cor_mat),
)
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 20, cellwidth = 450 / nrow(cor_mat),
)
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 20, cellwidth = 450 / nrow(cor_mat), width = 5)
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 20, cellwidth = 450 / nrow(cor_mat))
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 20, cellwidth = 450 / nrow(cor_mat),
annotation_colors = c("blue", "firebrick"))
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 20, cellwidth = 450 / nrow(cor_mat),
annotation_colors = c("blue", "firebrick"))
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 20, cellwidth = 450 / nrow(cor_mat),
annotation_colors = list(cond = c("blue", "firebrick")) )
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 20, cellwidth = 450 / nrow(cor_mat),
annotation_colors = list(cond = c(T0 = "blue", T96 =  "firebrick")) )
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 20, cellwidth = 450 / nrow(cor_mat),
annotation_colors = list(cond = c(T0 = "purple", T96 =  "green")) )
x$gtable
x
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 20, cellwidth = 450 / nrow(cor_mat),
annotation_colors = list(cond = c(T0 = "purple", T96 = "green")), silent = TRUE )
x$gtable
x
x
shiny::runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
shiny::runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
shiny::runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
shiny::runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
setwd("C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny")
shiny::runApp('Version 2.0.0/App')
runApp('Version 2.0.0/App')
runApp('Version 2.0.0/App')
runApp('Version 2.0.0/App')
runApp('Version 2.0.0/App')
runApp('Version 2.0.0/App')
runApp('Version 2.0.0/App')
