runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
setwd("C:/Users/lucas/VBRN 2024/TestData")
md <- read.csv('Example_Meta_Data.csv')
setwd("C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/TestData/DEGhalfwayCorrectFiles")
shit <- read.csv('DEG_PreFiltered_DIM17823_14.csv')
setwd("C:/Users/lucas/RStudio Projects")
library(pheatmap)
library(dplyr)
head(shit)
head(md)
md.copy <- md
shit.copy <- shit
names(shit)
names <- names(shit)[9:14]
names
names
shit$sample <- names
md$sample <- names
md <- md %>% tibble::column_to_rownames(sample)
View(md)
View(md)
md
md <- data.frame(sample = md$sample, cond = c("T0", "T0", "T0", "T96", "T96", "T96"))
md
md <- md %>% tibble::column_to_rownames('sample')
md
shit
head(shit)
counts <- shit[, 9:14]
counts
head(counts)
cor(counts)
cor_mat <- cor(counts)
pheatmap(cor_mat)
pheatmap(cor_mat, angle_col = "45")
pheatmap(cor_mat, angle_col = "45", name = "Correlation")
pheatmap(cor_mat, angle_col = "45", name = "Correlation")
pheatmap(cor_mat, angle_col = "45", main = "Correlation")
pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md)
pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md)
pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md)
pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15)
pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 15)
pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 50)
pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 25)
pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 40)
pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 80)
pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 450 / nrow(cor_mat))
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 450 / nrow(cor_mat))
View(x)
x$gtable$grobs[[7]]
view(x$gtable$grobs[[7]])
print(x$gtable$grobs[[7]])
x$gtable$layout
legend_index <- which(p$gtable$layout$name == "legend")
legend_index <- which(x$gtable$layout$name == "legend")
legend <- x$gtable$grobs[[legend_index]]
legend
View(legend)
print(legend)
plot(legend)
legend$children[[1]]$gp <- gpar(fontsize = 14)  # Set the desired font size
legend$children[[2]]$widths <- unit(1, "cm")  # Increase the box width
library(grid)
legend$children[[1]]$gp <- gpar(fontsize = 14)  # Set the desired font size
legend$children[[2]]$widths <- unit(1, "cm")  # Increase the box width
legend$children[[2]]$heights <- unit(1, "cm") # Increase the box height
p$gtable$grobs[[legend_index]] <- legend
p <- x$gtable$grobs[[legend_index]] <- legend
p
legend$children[[1]]$gp <- gpar(fontsize = 75)  # Set the desired font size
legend$children[[2]]$widths <- unit(1, "cm")  # Increase the box width
legend$children[[2]]$heights <- unit(1, "cm") # Increase the box height
x <- x$gtable$grobs[[legend_index]] <- legend
x
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 450 / nrow(cor_mat))
legend_index <- which(x$gtable$layout$name == "legend")
legend <- x$gtable$grobs[[legend_index]]
legend$children[[1]]$gp <- gpar(fontsize = 75)  # Set the desired font size
legend$children[[2]]$widths <- unit(1, "cm")  # Increase the box width
legend$children[[2]]$heights <- unit(1, "cm") # Increase the box height
x
x
x$gtable$grobs[[legend_index]] <- legend
x
legend$children[[1]]$gp <- gpar(fontsize = 15)  # Set the desired font size
legend$children[[2]]$widths <- unit(1, "cm")  # Increase the box width
legend$children[[2]]$heights <- unit(1, "cm") # Increase the box height
x$gtable$grobs[[legend_index]] <- legend
x
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 450 / nrow(cor_mat))
legend_index <- which(x$gtable$layout$name == "legend")
legend <- x$gtable$grobs[[legend_index]]
legend$children[[1]]$gp <- gpar(fontsize = 15)  # Set the desired font size
legend$children[[2]]$widths <- unit(1, "cm")  # Increase the box width
legend$children[[2]]$heights <- unit(1, "cm") # Increase the box height
x$gtable$grobs[[legend_index]] <- legend
x
View(legend)
View(x)
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 450 / nrow(cor_mat))
legend_index <- which(x$gtable$layout$name == "legend")
legend <- x$gtable$grobs[[legend_index]]
View(legend)
legend$children[[1]]$gp <- gpar(fontsize = 15)  # Set the desired font size
legend$children[[2]]$widths <- unit(1, "cm")  # Increase the box width
legend$children[[2]]$heights <- unit(1, "cm") # Increase the box height
legend$children[[1]]$gp <- gpar(fontsize = 100)  # Set the desired font size
legend$children[[2]]$widths <- unit(1, "cm")  # Increase the box width
legend$children[[2]]$heights <- unit(1, "cm") # Increase the box height
x$gtable$grobs[[legend_index]] <- legend
x
x$gtable$grobs[[10]] <- legend
x
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 450 / nrow(cor_mat))
legend_index <- which(x$gtable$layout$name == "legend")
legend <- x$gtable$grobs[[legend_index]]
legend$children[[1]]$gp <- gpar(fontsize = 100)  # Set the desired font size
x$gtable$grobs[[10]] <- legend
x
legend$children[[1]]$gp <- gpar(fontsize = 2)  # Set the desired font size
x$gtable$grobs[[10]] <- legend
x
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 15, cellwidth = 450 / nrow(cor_mat))
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 3, cellwidth = 450 / nrow(cor_mat))
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 45, cellwidth = 450 / nrow(cor_mat))
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 2, cellwidth = 450 / nrow(cor_mat),
)
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 10, cellwidth = 450 / nrow(cor_mat),
)
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 20, cellwidth = 450 / nrow(cor_mat),
)
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 20, cellwidth = 450 / nrow(cor_mat), width = 5)
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 20, cellwidth = 450 / nrow(cor_mat))
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 20, cellwidth = 450 / nrow(cor_mat),
annotation_colors = c("blue", "firebrick"))
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 20, cellwidth = 450 / nrow(cor_mat),
annotation_colors = c("blue", "firebrick"))
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 20, cellwidth = 450 / nrow(cor_mat),
annotation_colors = list(cond = c("blue", "firebrick")) )
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 20, cellwidth = 450 / nrow(cor_mat),
annotation_colors = list(cond = c(T0 = "blue", T96 =  "firebrick")) )
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 20, cellwidth = 450 / nrow(cor_mat),
annotation_colors = list(cond = c(T0 = "purple", T96 =  "green")) )
x$gtable
x
x <- pheatmap(cor_mat, angle_col = "45", main = "Correlation", annotation_col = md,
fontsize = 20, cellwidth = 450 / nrow(cor_mat),
annotation_colors = list(cond = c(T0 = "purple", T96 = "green")), silent = TRUE )
x$gtable
x
x
shiny::runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
shiny::runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
shiny::runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
shiny::runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
shiny::runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
print("_______________________")
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
shiny::runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
library(circlize)
library(dplyr)
library(ggplot2)
#Start by defining the destinations
dest <- c("US", "Canada", "China", "Taiwan", "Japan")
#Next we need to create a vector that will eventually be a column of shipped packages to each of out destinations from the origin
#For this example the Origins will be the same countries are the destinations
US <- c(0, 15, 5, 7, 20)
Canada <- c(10, 0, 7, 6, 10)
China <- c(65, 50, 0, 45, 70)
Taiwan <- c(30, 20, 40, 0, 25)
Japan <- c(20, 15, 10, 17, 0)
#Now we can turn this into a data frame and transform the columns into rows
Data <- data.frame(US, Canada, China, Taiwan, Japan) %>% t() %>% data.frame()
colnames(Data) <- dest
Data
circos.clear()
circos.par(gap.after = c(10, 10, 10, 10, 10))
chordDiagram(
as.matrix(Data),
grid.col = c(
US = "#6e2832",
Canada = "#3b5489",
Japan = "#2b2b2d",
China = "#5a5e36",
Taiwan = "#d0b599"
),
transparency = 0.2,
)
DataSegments <- Data
colnames(DataSegments) <- c("+US", "+Canada", "+China", "+Taiwan", "+Japan")
rownames(DataSegments) <- c("-US", "-Canada", "-China", "-Taiwan", "-Japan")
DataSegments
#clear the plot
circos.clear()
#Set a start so that its not crooked
circos.par(start.degree = 0)
chordDiagram(
as.matrix(DataSegments),
grid.col = c(
"-US" = "#6e2832",
"-Canada" = "#3b5489",
"-Japan" = "#2b2b2d",
"-China" = "#5a5e36",
"-Taiwan" = "#d0b599",
"+US" = "#6e2832",
"+Canada" = "#3b5489",
"+Japan" = "#2b2b2d",
"+China" = "#5a5e36",
"+Taiwan" = "#d0b599"
),
annotationTrack = c("grid", "name"),
big.gap = 45,
transparency = 0.2
)
#Using another package intended to make heatmaps we can add a legend for which section is imports and which is exports
library(ComplexHeatmap)
lgd = Legend(
at = c("Destination", "Origin"),
type = "points",
legend_gp = gpar(col = "black"), #color
pch = c("+", "-"), # point shape
title_position = "topleft",
title = "Shipping Direction"
)
#clear the plot
circos.clear()
#Set a start so that its not crooked
circos.par(start.degree = 0)
chordDiagram(
as.matrix(DataSegments),
grid.col = c(
"-US" = "#6e2832",
"-Canada" = "#3b5489",
"-Japan" = "#2b2b2d",
"-China" = "#5a5e36",
"-Taiwan" = "#d0b599",
"+US" = "#6e2832",
"+Canada" = "#3b5489",
"+Japan" = "#2b2b2d",
"+China" = "#5a5e36",
"+Taiwan" = "#d0b599"
),
annotationTrack = c("grid", "name"),
big.gap = 45,
transparency = 0.2
)
draw(lgd, x = unit(0.75, "npc"), y = unit(0.45, "npc"), just = c("left", "bottom"))
Data
ggplot(Data)
Data
pheatmap(Data)
Data
pheatmap(Data, cluster_rows = FALSE)
Data
pheatmap(DataSegments, cluster_rows = FALSE)
Data
pheatmap(DataSegments, cluster_rows = FALSE, display_numbers = TRUE, labels_row = "left")
Data
pheatmap(DataSegments, cluster_rows = FALSE, display_numbers = TRUE)
library(fmsb)
library(dplyr)
library(ggplot2)
devtools::install_github("ricardo-bion/ggradar")
library(ggradar)
Stat <- c("Speed", "Attack", "Charisma", "Defense")
Val <- c(  90,       60,        75,         35   )
Data <- data.frame("Stat"  = Stat, "Val" = Val)
#This data frame represents the data to be put in the chart, however it is not complete
Data
Data$min <- 0
Data$max <- 100
#Make sure your min and max are first two columns
#In this example I can just flip my data horizontally
Data <- Data[,nrow(Data):1] %>% tibble::column_to_rownames("Stat")
#This data frame now has all the neccessary data to make the chart
Data
#It is in the wrong orientation because unlike ggplot the fmsb radar
#chart function takes each category its own column
Data <- Data %>% t() %>% data.frame()
class(Data)
Data
radarchart(Data)
#Elden Ring Stat Example
CharStats <- c("Vigor", "Mind", "Endurance", "Strength", "Dexterity", "Intelligence", "Faith", "Arcane")
#Here I have the Stat line for a decent level 120 strength build.
CurrentLevel <- 120
StatValues <- c(35, 20, 20, 45, 40, 10, 14, 15)
#Here I save the minimum state values for the vagabond class character
#Also the Starting stat (The vagabond starts at level 9)
StartingClassLevel <- 9
minStats <- c(15, 10, 11, 14, 13, 9, 9, 7)
#The max stats are a little more complicated, the max stat of any
#stat for a character is equal to the startStat + (level - startLevel)
maxStats <- minStats + (120 - StartingClassLevel)
#Create the Data Frame
StrengthCharacterBuild <- data.frame("max" = maxStats, "min" = minStats, "stats" = StatValues) %>%
#Change the max to the maximum stat for easier diffrentiation between values
mutate(max = max(StatValues))
rownames(StrengthCharacterBuild) <- CharStats
#Transform sideways
StrengthCharacterBuild <- StrengthCharacterBuild %>% t() %>% data.frame()
#Basic plot
radarchart(StrengthCharacterBuild)
#Now lets make it look a little nicer
radarchart(
StrengthCharacterBuild,
pty = 16,
plty = 1,
cglty = 1,
cglcol = "grey",
title = "Character Stats",
pfcol = c(rgb(78/255, 65/255, 56/255, 0.75)),
pcol = c("black")
)
#Elden Ring Stat Example
CharStats <- c("Vigor", "Mind", "Endurance", "Strength", "Dexterity", "Intelligence", "Faith", "Arcane")
#Here I have the Stat line for a decent level 120 strength build.
CurrentLevel <- 120
StatValues <- c(35, 20, 20, 45, 40, 10, 14, 15)
#Here I save the minimum state values for the vagabond class character
#Also the Starting stat (The vagabond starts at level 9)
StartingClassLevel <- 9
minStats <- c(15, 10, 11, 14, 13, 9, 9, 7)
#The max stats are a little more complicated, the max stat of any
#stat for a character is equal to the startStat + (level - startLevel)
maxStats <- minStats + (120 - StartingClassLevel)
#Create the Data Frame
StrengthCharacterBuildTrimmed <- data.frame("max" = maxStats, "min" = minStats, "stats" = StatValues) %>%
#Change the max to the maximum stat for easier diffrentiation between values
mutate(max = max(StatValues))
rownames(StrengthCharacterBuildTrimmed) <- CharStats
#Transform sideways
StrengthCharacterBuildTrimmed <- StrengthCharacterBuildTrimmed %>% t() %>% data.frame()
#Basic plot
radarchart(StrengthCharacterBuildTrimmed)
#Now lets make it look a little nicer
radarchart(
StrengthCharacterBuildNoTrim,
pty = 16,
plty = 1,
cglty = 1,
cglcol = "grey",
title = "Character Stats",
pfcol = c(rgb(78/255, 65/255, 56/255, 0.75)),
pcol = c("black")
)
StrengthCharacterBuildNoTrim <- data.frame("max" = maxStats, "min" = minStats, "stats" = StatValues) %>%
#Change the max to the maximum stat for easier diffrentiation between values
mutate(max = max(StatValues))
#Now lets make it look a little nicer
radarchart(
StrengthCharacterBuildNoTrim,
pty = 16,
plty = 1,
cglty = 1,
cglcol = "grey",
title = "Character Stats",
pfcol = c(rgb(78/255, 65/255, 56/255, 0.75)),
pcol = c("black")
)
shiny::runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/Version 2.0.0/App')
setwd("C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny")
setwd("C:/Users/lucas/VBRN 2024")
setwd("C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool")
system("git remote -v")
system("git remote set-url origin https://github.com/LMilazzo/RNA-seq-Analysis-Tool")
system("git remote -v")
runApp('Version 2.0.0/App')
