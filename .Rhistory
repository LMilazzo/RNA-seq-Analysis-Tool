#---
data <- imp
abundancedata <- ab
rm(ab, imp, head)
#sort data
#---
abundancedata$Gene_symbol <- rownames(abundancedata)
abundancedata <- abundancedata[,c(7, 1:6)]
abundancedata$p <- data$P.val
abundancedata <- abundancedata %>%drop_na()
data <- data[,c(1,3,2)] %>% drop_na()
#PathfindR setup ---
kegg <- plyr::ldply(pathfindR.data::kegg_genes, data.frame) %>%
mutate(num_genes_in_path = 1) %>%
dplyr::group_by(.data$.id) %>%
dplyr::summarize(X..i.. = paste0(.data$X..i.., collapse = ", "), num_genes_in_path = sum(num_genes_in_path))
names(kegg)[1] <- "ID"
names(kegg)[2] <- "all_pathway_genes"
#---
#Run pathfinder
#---
res <- run_pathfindR(data,
pin_name_path = "KEGG",
enrichment_threshold = 0.05,
iterations = 25,
list_active_snw_genes = TRUE)
res <- left_join(res, kegg)
#---
res_clustered <- cluster_enriched_terms(res,
plot_dend = TRUE,
plot_clusters_graph = TRUE)
#ENRICHER FUNCTION
#----
enricher <- function(data, clusters, genes, pathways){
if( is.null(data) ){
stop("There was no data input")
}
data <- data %>%
mutate(gene_list = lapply(all_pathway_genes, function(x) trimws(unlist(strsplit(x, ",")))))
if( ! is.null(clusters) ){
clusters <- clusters %>% as.numeric()
bycluster <- data %>% filter( Cluster %in% clusters )
} else{ bycluster <- data %>% filter(ID == "NULL VALUE") }
if( ! is.null(genes) ){
bygene <- data %>%
filter(map_lgl(gene_list, ~ any(.x %in% genes)))
} else{ bygene <- data %>% filter(ID == "NULL VALUE") }
if( ! is.null(pathways) ){
bypath <- data %>%
filter(Term_Description %in% pathways)
} else{ bypath <- data %>% filter(ID == "NULL VALUE") }
fdata <- rbind(bycluster, bygene, bypath) %>% distinct()
if(nrow(fdata) < 1){
fdata <- subset(data, Cluster %in% 1:10)
}
plot <- enrichment_chart(fdata, plot_by_cluster = TRUE)
return(plot)
}
#HEATMAP BY GENE FUNCTION
#----
geneheatmap <- function(
data = NULL,
genes = NULL){
if( is.null(data) ){
stop("no data input")
}
if( is.null(genes) ){
stop("try using a list of genes to plot")
}
data <- data %>%
mutate(gene_list = lapply(all_pathway_genes,
function(x) trimws(unlist(strsplit(x, ",")))))
tofilter <- data %>% filter(ID == "INITIALIZE")
if( ! is.null(genes)){
tofilter <- data %>% filter(map_lgl(gene_list, ~ any(.x %in% genes)))
}
if(nrow(tofilter) < 2){
print("your genes did not appear in enough pathways, plot will be populated with top ten pathways")
data <- data %>% arrange(desc(round(Fold_Enrichment, digits=2)), lowest_p)
filtered <- rbind(tofilter, head(data, 10)) %>% distinct()
}else{
filtered <- tofilter
}
filtered <- filtered %>% select(-gene_list)
if(nrow(filtered) > 50 ){
print("first 50 pathways will be displayed")
ts <- 50
}else{
ts <- nrow(filtered)
}
dummy <- term_gene_heatmap(filtered, num_terms = ts, use_description = TRUE)
data <- dummy$plot_env$term_genes_df
dummy <- NULL
data <- data %>% filter(Symbol %in% genes)
data <- data %>% drop_na()
if(nrow(data) < 1){
stop("not enough data to plot")
}
plot <- ggplot(data, aes(x = Symbol, y = Enriched_Term, fill = value)) +
geom_tile(color = 'black') +
scale_fill_manual(values = c("up" = 'skyblue', "down" = 'indianred3')) +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.title.y = element_blank())
plotly_plot <- ggplotly(plot) %>%
layout(
yaxis = list(
automargin = TRUE,
showgrid = TRUE,        # Ensure horizontal grid lines are shown
gridcolor = "lightgray", # Set grid line color
gridwidth = 1)
)
return(list(plot, plotly_plot))
}
# #----
#HEATMAP BY PATHWAY Verticle
#----
pathwayheatmapVERT <- function(
data = NULL,
pathways = NULL){
if( is.null(data) ){
stop("no input data")
}
if( is.null(pathways) || is.character(pathways)){
if( is.null(pathways) || length(pathways) < 2){
print("not enough pathways in input, will use top ten")
}
selected_pathways <- data %>%
filter(Term_Description %in% pathways)
topten <- head(data, 10)
if(nrow(selected_pathways) < 2){
data <- rbind(selected_pathways, topten)
}else{
data <- selected_pathways
}
}
else if( is.numeric(pathways) ){
if(pathways > 75){
print("rounded down to 75")
pathways <- 75
}
data <- head(data, pathways)
}else{
stop("the data input was an unreadable format")
}
ts <- nrow(data)
dummy <- term_gene_heatmap(data, num_terms = ts, use_description = TRUE)
data <- dummy$plot_env$term_genes_df
dummy <- NULL
data <- data %>% drop_na()
data <- data %>%
mutate(alpha = factor(
case_when(
toupper(substr(Symbol, 1, 1)) %in% LETTERS[1:5] ~ "A-E",
toupper(substr(Symbol, 1, 1)) %in% LETTERS[6:10] ~ "F-J",
toupper(substr(Symbol, 1, 1)) %in% LETTERS[11:15] ~ "K-O",
toupper(substr(Symbol, 1, 1)) %in% LETTERS[16:20] ~ "P-T",
toupper(substr(Symbol, 1, 1)) %in% LETTERS[21:26] ~ "U-Z"
),
levels = c("A-E", "F-J", "K-O", "P-T", "U-Z")
))
data$Symbol <- factor(data$Symbol, levels = sort(levels(data$Symbol), decreasing=TRUE))
print(head(data))
h <- nlevels(data$Symbol) * 20
pp <- ggplot(data, aes(x = Enriched_Term, y = Symbol, fill = value)) +
geom_tile(color = 'black', linewidth = 0.25) +
scale_fill_manual(values = c("up" = 'skyblue', "down" = 'indianred3')) +
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_text(size = 7),
axis.text.x = element_text(size = 9, angle = 90, margin = margin(0,5,0,5, "pt")),
axis.title.x = element_blank())
plot <- ggplotly(pp, width = 1500, height = h, dynamicTicks = FALSE) %>%
layout(
margin = list(l = 50, r = 50, b = 100, t = 50), # Left, Right, Bottom, Top margins
yaxis = list(
automargin = TRUE,
showgrid = TRUE,        # Ensure horizontal grid lines are shown
gridcolor = "lightgray", # Set grid line color
gridwidth = 1    ), # Ensure y-axis labels fit
xaxis = list(
showline = FALSE,   # Set x-axis title
side = "top",              # Manually place title on top
anchor = "y",              # Anchor x-axis to y-axis
overlaying = "x",          # Overlay axes (ensures only the top one shows)
showticklabels = TRUE,
tickfont = list(size = 12),
title = ""
)
)
saveWidget(plot, "plot.html")
browseURL("plot.html")
}
x <- enricher(res_clustered, c(1,50,3), NULL, NULL)
x
x <- geneheatmap(res, c("FYN"))
saveWidget(x[[2]], "plot.html")
browseURL("plot.html")
x <- pathwayheatmapVERT(res, 50)
x <- pathwayheatmapVERT(res, 50)
x <- pathwayheatmapVERT(res, 20)
setwd("C:/Users/lucas/RStudio Projects")
library(dplyr)
library(plyr)
library(readxl)
library(tidyr)
library(dplyr)
library(pathfindR)
library(purrr)
library(ggplot2)
library(plotly)
library(cowplot)
library(htmlwidgets)
library(BioVis)
#Set up data
#---
data <- read.csv("C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/TestData/DEG_CORRECTED_FILTERED_DIM17823_14.csv")
imp <- data %>% select(gene_name, padj, log2FoldChange)
ab <- data[,(ncol(data)-6):(ncol(data))]
ab <- ab %>% tibble::column_to_rownames('gene_name')
head <- c('Gene_symbol', 'P.val', 'logFC')
colnames(imp) <- head
#---
data <- imp
abundancedata <- ab
rm(ab, imp, head)
#sort data
#---
abundancedata$Gene_symbol <- rownames(abundancedata)
abundancedata <- abundancedata[,c(7, 1:6)]
abundancedata$p <- data$P.val
abundancedata <- abundancedata %>%drop_na()
data <- data[,c(1,3,2)] %>% drop_na()
#PathfindR setup ---
kegg <- plyr::ldply(pathfindR.data::kegg_genes, data.frame) %>%
mutate(num_genes_in_path = 1) %>%
dplyr::group_by(.data$.id) %>%
dplyr::summarize(X..i.. = paste0(.data$X..i.., collapse = ", "), num_genes_in_path = sum(num_genes_in_path))
names(kegg)[1] <- "ID"
names(kegg)[2] <- "all_pathway_genes"
#---
#Run pathfinder
#---
res <- run_pathfindR(data,
pin_name_path = "KEGG",
enrichment_threshold = 0.05,
iterations = 25,
list_active_snw_genes = TRUE)
res <- left_join(res, kegg)
#---
res_clustered <- cluster_enriched_terms(res,
plot_dend = TRUE,
plot_clusters_graph = TRUE)
(
x <- enricher(res_clustered, c(1,50,3), NULL, NULL)
x <- enricher(res_clustered, c(1,50,3), NULL, NULL)
x
x <- enricher(res_clustered, c(1,50,3), NULL, NULL)
?BioVis
??BioVis
library(BioVis)
devtools::install_github("lmilazzo/BioVis")
library(BioVis)
ls(BioVis)
ls("BioVis")
search()
detach(BioVis)
detach("BioVis")
detach("BioVis", unload = TRUE)
detach("package:BioVis", unload = TRUE)
search()
devtools::instal_github("lmilazzo/BioVis")
devtools::install_github("lmilazzo/BioVis")
library(BioVis)
ls(BioVis)
ls("BioVis")
library(BioVis)
x <- enricher(res_clustered, c(1,50,3), NULL, NULL)
x <- enricher(res_clustered, c(1,50,3), NULL, NULL)
setwd("C:/Users/lucas/RStudio Projects/BioVis")
devtools::document()
devtools::check()
git add .
setwd("C:/Users/lucas/RStudio Projects")
detach("package:BioVis", unload = TRUE)
devtools::install_github("lmilazzo/BioVis")
library(BioVis)
x <- enricher(res_clustered, c(1,50,3), NULL, NULL)
x
x <- enricher(res_clustered, c(1,50,3), genes = c("FYN"), NULL)
x
x <- geneheatmap(res_clustered, c("FYN","ABL1", "SRC", "LYN", "HCK", "YES1", "BLK", "LCK", "CSK", "SYK", "ZAP70"))
x
x[[1]]
x[[2]]
saveWidget(x[[2]], "plot.html")
browseURL("plot.html")
setwd("C:/Users/lucas/RStudio Projects/BioVis")
setwd("C:/Users/lucas/RStudio Projects")
library(dplyr)
library(plyr)
library(readxl)
library(tidyr)
library(dplyr)
library(pathfindR)
library(purrr)
library(ggplot2)
library(plotly)
library(cowplot)
detach("package:BioVis", unload = TRUE)
search()
devtools::install_github("lmilazzo/BioVis")
library(BioVis)
#Set up data
#---
data <- read.csv("C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/TestData/DEG_CORRECTED_FILTERED_DIM17823_14.csv")
imp <- data %>% select(gene_name, padj, log2FoldChange)
ab <- data[,(ncol(data)-6):(ncol(data))]
ab <- ab %>% tibble::column_to_rownames('gene_name')
head <- c('Gene_symbol', 'P.val', 'logFC')
colnames(imp) <- head
#---
data <- imp
abundancedata <- ab
rm(ab, imp, head)
#sort data
#---
abundancedata$Gene_symbol <- rownames(abundancedata)
abundancedata <- abundancedata[,c(7, 1:6)]
abundancedata$p <- data$P.val
abundancedata <- abundancedata %>%drop_na()
data <- data[,c(1,3,2)] %>% drop_na()
#PathfindR setup ---
kegg <- plyr::ldply(pathfindR.data::kegg_genes, data.frame) %>%
mutate(num_genes_in_path = 1) %>%
dplyr::group_by(.data$.id) %>%
dplyr::summarize(X..i.. = paste0(.data$X..i.., collapse = ", "), num_genes_in_path = sum(num_genes_in_path))
names(kegg)[1] <- "ID"
names(kegg)[2] <- "all_pathway_genes"
#---
#Run pathfinder
#---
res <- run_pathfindR(data,
pin_name_path = "KEGG",
enrichment_threshold = 0.05,
iterations = 25,
list_active_snw_genes = TRUE)
res <- left_join(res, kegg)
#---
res_clustered <- cluster_enriched_terms(res,
plot_dend = TRUE,
plot_clusters_graph = TRUE)
x <- pathwayheatmap(res_clustered, 15)
x[[1]]
saveWidget(x[[2]], "plot.html")
browseURL("plot.html")
saveWidget(x[[2]], "plot.html")
browseURL("plot.html")
x <- pathwayheatmap(res_clustered, 15)
x[[1]]
saveWidget(x[[2]], "plot.html")
browseURL("plot.html")
print(x[[2]])
View(x)
rm(x, "plot.html")
"plot.html"
"h"
saveWidget(x[[2]], "plot.html")
library(dplyr)
library(plyr)
library(readxl)
library(tidyr)
library(dplyr)
library(pathfindR)
library(purrr)
library(ggplot2)
library(plotly)
library(cowplot)
library(htmlwidgets)
x <- pathwayheatmap(res_clustered, 15)
x[[1]]
saveWidget(x[[2]], "plot.html")
browseURL("plot.html")
library(dplyr)
library(plyr)
library(readxl)
library(tidyr)
library(dplyr)
library(pathfindR)
library(purrr)
library(ggplot2)
library(plotly)
library(cowplot)
library(htmlwidgets)
library(BioVis)
#Set up data
#----
data <- read.csv("C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/TestData/DEG_CORRECTED_FILTERED_DIM17823_14.csv")
imp <- data %>% select(gene_name, padj, log2FoldChange)
ab <- data[,(ncol(data)-6):(ncol(data))]
ab <- ab %>% tibble::column_to_rownames('gene_name')
head <- c('Gene_symbol', 'P.val', 'logFC')
colnames(imp) <- head
#---
data <- imp
abundancedata <- ab
rm(ab, imp, head)
#sort data
#---
abundancedata$Gene_symbol <- rownames(abundancedata)
abundancedata <- abundancedata[,c(7, 1:6)]
abundancedata$p <- data$P.val
abundancedata <- abundancedata %>%drop_na()
data <- data[,c(1,3,2)] %>% drop_na()
#PathfindR setup ---
kegg <- plyr::ldply(pathfindR.data::kegg_genes, data.frame) %>%
mutate(num_genes_in_path = 1) %>%
dplyr::group_by(.data$.id) %>%
dplyr::summarize(X..i.. = paste0(.data$X..i.., collapse = ", "), num_genes_in_path = sum(num_genes_in_path))
names(kegg)[1] <- "ID"
names(kegg)[2] <- "all_pathway_genes"
#---
#Run pathfinder
#---
res <- run_pathfindR(data,
pin_name_path = "KEGG",
enrichment_threshold = 0.05,
iterations = 25,
list_active_snw_genes = TRUE)
df <- data.frame(Path = c("sub1", "sub2", "sub3"), Eyes = c("Blue", "Green", "Blue"), Hair = c("Long", "Long", "Long"))
df
setwd("C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny")
shiny::runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
#Set up data
#---
data <- read.csv("C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/TestData/DEG_CORRECTED_FILTERED_DIM17823_14.csv")
head(data)
ab <- data[,(ncol(data)-6):(ncol(data))]
head(ab)
ab <- ab %>% tibble::column_to_rownames('gene_name')
head <- c('Gene_symbol', 'P.val', 'logFC')
colnames(imp) <- head
imp <- data %>% select(gene_name, padj, log2FoldChange)
ab <- data[,(ncol(data)-6):(ncol(data))]
head(ab)
ab <- ab %>% tibble::column_to_rownames('gene_name')
head <- c('Gene_symbol', 'P.val', 'logFC')
colnames(imp) <- head
#---
data <- imp
abundancedata <- ab
rm(ab, imp, head)
head(ab)
head(data)
head(abundancedata)
#sort data
#---
abundancedata$Gene_symbol <- rownames(abundancedata)
head(abundancedata)
abundancedata <- abundancedata[,c(7, 1:6)]
abundancedata$p <- data$P.val
abundancedata <- abundancedata %>%drop_na()
data <- data[,c(1,3,2)] %>% drop_na()
head(abundancedata)
#----
library(dplyr)
library(plyr)
library(readxl)
library(tidyr)
library(dplyr)
library(pathfindR)
library(purrr)
library(ggplot2)
library(plotly)
library(cowplot)
library(htmlwidgets)
data <- data[,c(1,3,2)] %>% drop_na()
head(data)
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
