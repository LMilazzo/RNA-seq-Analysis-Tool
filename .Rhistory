#Create separate dfs with hits for each search criteria
#CLUSTERS
if( ! is.null(clusters) ){
clusters <- clusters %>% as.numeric()
bycluster <- data %>% filter( Cluster %in% clusters)
}
#GENES
if( ! is.null(genes) ){
bygene <- data %>%
filter(map_lgl(gene_list, ~ any(.x %in% genes)))
}
#PATHWAYS
if( ! is.null(pathways) ){
bypath <- data %>%
filter(Term_Description %in% pathways)
}
#Remake larger data frame with all hits distinctively
hits <- rbind(bycluster, bygene, bypath) %>% distinct()
#Default for no hits
if( nrow(hits) < 1){
#Show the first 10 clusters
hits <- subset(data, Cluster %in% 1:10)
}
#----
#______________CREATE THE PLOT______________
print(hits)
plot <- enrichment_chart2(hits, plot_by_cluster = TRUE)
print(plot)
plot <- ggplotly(plot) %>%
style(
traces = list(
marker = list(
color = hits$log_p,     # Assign color to log_p values
size = hits$num_genes,  # Assign size to num_genes values
colorscale = 'RdYlBu',       # Set the color scale (you can choose another)
sizemode = 'diameter',       # Define how the size is applied
showscale = TRUE             # Show the color scale legend
)
)
)
enricher1 <- function(
#----
data = NULL,
clusters = NULL,
genes = NULL,
pathways = NULL
#----
){
#______________INPUT VALIDATION_____________
#----
if( is.null(data) ){
stop("There was no data input")
}
#Ensure required format is met
expected_names <- c("ID", "Term_Description", "Fold_Enrichment", "occurrence", "support",
"lowest_p", "highest_p", "non_Signif_Snw_Genes", "Up_regulated",
"Down_regulated", "all_pathway_genes", "num_genes_in_path", "Cluster", "Status")
if( length(intersect(expected_names, colnames(data))) < length(expected_names)) {
stop("The data is not the correct format")
}
#Preset for search conditions not used
if( is.null(clusters) ){
bycluster <- data %>% filter(ID == "NULL VALUE")
}
if( is.null(genes) ){
bygene <- data %>% filter(ID == "NULL VALUE")
}
if( is.null(pathways) ){
bypath <- data %>% filter(ID == "NULL VALUE")
}
#----
#______________DATA MANIPULATION____________
#----
#Change the all pathway gene lists generated by pathfindR to a list of individual gene names
data <- data %>%
mutate(gene_list = lapply(all_pathway_genes, function(x) trimws(unlist(strsplit(x, ",")))))
#Create separate dfs with hits for each search criteria
#CLUSTERS
if( ! is.null(clusters) ){
clusters <- clusters %>% as.numeric()
bycluster <- data %>% filter( Cluster %in% clusters)
}
#GENES
if( ! is.null(genes) ){
bygene <- data %>%
filter(map_lgl(gene_list, ~ any(.x %in% genes)))
}
#PATHWAYS
if( ! is.null(pathways) ){
bypath <- data %>%
filter(Term_Description %in% pathways)
}
#Remake larger data frame with all hits distinctively
hits <- rbind(bycluster, bygene, bypath) %>% distinct()
#Default for no hits
if( nrow(hits) < 1){
#Show the first 10 clusters
hits <- subset(data, Cluster %in% 1:10)
}
#----
#______________CREATE THE PLOT______________
print(hits)
plot <- enrichment_chart2(hits, plot_by_cluster = TRUE)
print(plot)
plot <- ggplotly(plot) %>%
style(
traces = list(
marker = list(
color = hits$log_p,     # Assign color to log_p values
size = hits$num_genes,  # Assign size to num_genes values
colorscale = 'RdYlBu',       # Set the color scale (you can choose another)
sizemode = 'diameter',       # Define how the size is applied
showscale = TRUE             # Show the color scale legend
)
)
)
}
plot <- enricher1(res_clustered, NULL, NULL, NULL)
plot <- enricher1(res_clustered, NULL, NULL, NULL)
enricher1 <- function(
#----
data = NULL,
clusters = NULL,
genes = NULL,
pathways = NULL
#----
){
#______________INPUT VALIDATION_____________
#----
if( is.null(data) ){
stop("There was no data input")
}
#Ensure required format is met
expected_names <- c("ID", "Term_Description", "Fold_Enrichment", "occurrence", "support",
"lowest_p", "highest_p", "non_Signif_Snw_Genes", "Up_regulated",
"Down_regulated", "all_pathway_genes", "num_genes_in_path", "Cluster", "Status")
if( length(intersect(expected_names, colnames(data))) < length(expected_names)) {
stop("The data is not the correct format")
}
#Preset for search conditions not used
if( is.null(clusters) ){
bycluster <- data %>% filter(ID == "NULL VALUE")
}
if( is.null(genes) ){
bygene <- data %>% filter(ID == "NULL VALUE")
}
if( is.null(pathways) ){
bypath <- data %>% filter(ID == "NULL VALUE")
}
#----
#______________DATA MANIPULATION____________
#----
#Change the all pathway gene lists generated by pathfindR to a list of individual gene names
data <- data %>%
mutate(gene_list = lapply(all_pathway_genes, function(x) trimws(unlist(strsplit(x, ",")))))
#Create separate dfs with hits for each search criteria
#CLUSTERS
if( ! is.null(clusters) ){
clusters <- clusters %>% as.numeric()
bycluster <- data %>% filter( Cluster %in% clusters)
}
#GENES
if( ! is.null(genes) ){
bygene <- data %>%
filter(map_lgl(gene_list, ~ any(.x %in% genes)))
}
#PATHWAYS
if( ! is.null(pathways) ){
bypath <- data %>%
filter(Term_Description %in% pathways)
}
#Remake larger data frame with all hits distinctively
hits <- rbind(bycluster, bygene, bypath) %>% distinct()
#Default for no hits
if( nrow(hits) < 1){
#Show the first 10 clusters
hits <- subset(data, Cluster %in% 1:10)
}
#----
#______________CREATE THE PLOT______________
print(hits)
plot <- enrichment_chart2(hits, plot_by_cluster = TRUE)
print(plot)
plot <- ggplotly(plot) %>%
style(
traces = list(
marker = list(
color = hits$log_p,     # Assign color to log_p values
size = hits$num_genes,  # Assign size to num_genes values
colorscale = 'RdYlBu',       # Set the color scale (you can choose another)
sizemode = 'diameter',       # Define how the size is applied
showscale = TRUE             # Show the color scale legend
)
)
)
}
plot <- enricher1(res_clustered, NULL, NULL, NULL)
enricher1 <- function(
#----
data = NULL,
clusters = NULL,
genes = NULL,
pathways = NULL
#----
){
#______________INPUT VALIDATION_____________
#----
if( is.null(data) ){
stop("There was no data input")
}
#Ensure required format is met
expected_names <- c("ID", "Term_Description", "Fold_Enrichment", "occurrence", "support",
"lowest_p", "highest_p", "non_Signif_Snw_Genes", "Up_regulated",
"Down_regulated", "all_pathway_genes", "num_genes_in_path", "Cluster", "Status")
if( length(intersect(expected_names, colnames(data))) < length(expected_names)) {
stop("The data is not the correct format")
}
#Preset for search conditions not used
if( is.null(clusters) ){
bycluster <- data %>% filter(ID == "NULL VALUE")
}
if( is.null(genes) ){
bygene <- data %>% filter(ID == "NULL VALUE")
}
if( is.null(pathways) ){
bypath <- data %>% filter(ID == "NULL VALUE")
}
#----
#______________DATA MANIPULATION____________
#----
#Change the all pathway gene lists generated by pathfindR to a list of individual gene names
data <- data %>%
mutate(gene_list = lapply(all_pathway_genes, function(x) trimws(unlist(strsplit(x, ",")))))
#Create separate dfs with hits for each search criteria
#CLUSTERS
if( ! is.null(clusters) ){
clusters <- clusters %>% as.numeric()
bycluster <- data %>% filter( Cluster %in% clusters)
}
#GENES
if( ! is.null(genes) ){
bygene <- data %>%
filter(map_lgl(gene_list, ~ any(.x %in% genes)))
}
#PATHWAYS
if( ! is.null(pathways) ){
bypath <- data %>%
filter(Term_Description %in% pathways)
}
#Remake larger data frame with all hits distinctively
hits <- rbind(bycluster, bygene, bypath) %>% distinct()
#Default for no hits
if( nrow(hits) < 1){
#Show the first 10 clusters
hits <- subset(data, Cluster %in% 1:10)
}
#----
#______________CREATE THE PLOT______________
print(hits)
plot <- enrichment_chart2(hits, plot_by_cluster = TRUE)
print(plot)
plot <- ggplotly(plot) %>%
style(
traces = list(
marker = list(
color = -log10(hits$lowest_p),     # Assign color to log_p values
size = hits$num_genes_in_path,  # Assign size to num_genes values
colorscale = 'RdYlBu',       # Set the color scale (you can choose another)
sizemode = 'diameter',       # Define how the size is applied
showscale = TRUE             # Show the color scale legend
)
)
)
}
plot <- enricher1(res_clustered, NULL, NULL, NULL)
saveWidget(plot, 'plot.html')
browseURL('plot.html')
enrichment_chart2 <- function(result_df, top_terms = 10, plot_by_cluster = FALSE,
num_bubbles = 4, even_breaks = TRUE) {
message("Plotting the enrichment bubble chart")
necessary <- c("Term_Description", "Fold_Enrichment", "lowest_p", "Up_regulated",
"Down_regulated")
if (!all(necessary %in% colnames(result_df))) {
stop("The input data frame must have the columns:\n", paste(necessary, collapse = ", "))
}
if (!is.logical(plot_by_cluster)) {
stop("`plot_by_cluster` must be either TRUE or FALSE")
}
if (!is.numeric(top_terms) & !is.null(top_terms)) {
stop("`top_terms` must be either numeric or NULL")
}
if (!is.null(top_terms)) {
if (top_terms < 1) {
stop("`top_terms` must be > 1")
}
}
# sort by lowest adj.p
result_df <- result_df[order(result_df$lowest_p), ]
## Filter for top_terms
if (!is.null(top_terms)) {
if (plot_by_cluster & "Cluster" %in% colnames(result_df)) {
keep_ids <- tapply(result_df$ID, result_df$Cluster, function(x) {
x[seq_len(min(top_terms, length(x)))]
})
keep_ids <- unlist(keep_ids)
result_df <- result_df[result_df$ID %in% keep_ids, ]
} else if (top_terms < nrow(result_df)) {
result_df <- result_df[seq_len(top_terms), ]
}
}
num_genes <- vapply(result_df$Up_regulated, function(x) length(unlist(strsplit(x,
", "))), 1)
num_genes <- num_genes + vapply(result_df$Down_regulated, function(x) length(unlist(strsplit(x,
", "))), 1)
result_df$Term_Description <- factor(result_df$Term_Description, levels = rev(unique(result_df$Term_Description)))
log_p <- -log10(result_df$lowest_p)
g <- ggplot2::ggplot(result_df, ggplot2::aes(Fold_Enrichment, Term_Description))
g <- g + ggplot2::geom_point()
g <- g + ggplot2::theme_bw()
g <- g + ggplot2::theme(axis.text.x = ggplot2::element_text(size = 10), axis.text.y = ggplot2::element_text(size = 10),
plot.title = ggplot2::element_blank())
g <- g + ggplot2::xlab("Fold Enrichment")
g <- g + ggplot2::theme(axis.title.y = ggplot2::element_blank())
## breaks for # genes
if (max(num_genes) < num_bubbles) {
g <- g + ggplot2::scale_size_continuous(breaks = seq(0, max(num_genes)))
} else {
if (even_breaks) {
brks <- base::seq(0, max(num_genes), round(max(num_genes)/(num_bubbles +
1)))
} else {
brks <- base::round(base::seq(0, max(num_genes), length.out = num_bubbles +
1))
}
g <- g + ggplot2::scale_size_continuous(breaks = brks)
}
if (plot_by_cluster & "Cluster" %in% colnames(result_df)) {
g <- g + ggplot2::facet_grid(result_df$Cluster ~ ., scales = "free_y", space = "free",
drop = TRUE)
} else if (plot_by_cluster) {
message("For plotting by cluster, there must a column named `Cluster` in the input data frame!")
}
return(g)
}
plot <- enricher1(res_clustered, NULL, NULL, NULL)
saveWidget(plot, 'plot.html')
browseURL('plot.html')
enricher1 <- function(
#----
data = NULL,
clusters = NULL,
genes = NULL,
pathways = NULL
#----
){
#______________INPUT VALIDATION_____________
#----
if( is.null(data) ){
stop("There was no data input")
}
#Ensure required format is met
expected_names <- c("ID", "Term_Description", "Fold_Enrichment", "occurrence", "support",
"lowest_p", "highest_p", "non_Signif_Snw_Genes", "Up_regulated",
"Down_regulated", "all_pathway_genes", "num_genes_in_path", "Cluster", "Status")
if( length(intersect(expected_names, colnames(data))) < length(expected_names)) {
stop("The data is not the correct format")
}
#Preset for search conditions not used
if( is.null(clusters) ){
bycluster <- data %>% filter(ID == "NULL VALUE")
}
if( is.null(genes) ){
bygene <- data %>% filter(ID == "NULL VALUE")
}
if( is.null(pathways) ){
bypath <- data %>% filter(ID == "NULL VALUE")
}
#----
#______________DATA MANIPULATION____________
#----
#Change the all pathway gene lists generated by pathfindR to a list of individual gene names
data <- data %>%
mutate(gene_list = lapply(all_pathway_genes, function(x) trimws(unlist(strsplit(x, ",")))))
#Create separate dfs with hits for each search criteria
#CLUSTERS
if( ! is.null(clusters) ){
clusters <- clusters %>% as.numeric()
bycluster <- data %>% filter( Cluster %in% clusters)
}
#GENES
if( ! is.null(genes) ){
bygene <- data %>%
filter(map_lgl(gene_list, ~ any(.x %in% genes)))
}
#PATHWAYS
if( ! is.null(pathways) ){
bypath <- data %>%
filter(Term_Description %in% pathways)
}
#Remake larger data frame with all hits distinctively
hits <- rbind(bycluster, bygene, bypath) %>% distinct()
#Default for no hits
if( nrow(hits) < 1){
#Show the first 10 clusters
hits <- subset(data, Cluster %in% 1:10)
}
#----
#______________CREATE THE PLOT______________
print(hits)
plot <- enrichment_chart2(hits, plot_by_cluster = TRUE)
print(plot)
hits <- hits %>% mutate(log_p = -log10(lowest_p))
plot <- ggplotly(plot) %>%
style(
traces = list(
marker = list(
color = hits$log_p,     # Assign color to log_p values
size = hits$num_genes_in_path,  # Assign size to num_genes values
colorscale = 'RdYlBu',       # Set the color scale (you can choose another)
sizemode = 'diameter',       # Define how the size is applied
showscale = TRUE             # Show the color scale legend
)
)
)
}
plot <- enricher1(res_clustered, NULL, NULL, NULL)
plot <- enricher1(res_clustered, NULL, NULL, NULL)
enricher1 <- function(
#----
data = NULL,
clusters = NULL,
genes = NULL,
pathways = NULL
#----
){
#______________INPUT VALIDATION_____________
#----
if( is.null(data) ){
stop("There was no data input")
}
#Ensure required format is met
expected_names <- c("ID", "Term_Description", "Fold_Enrichment", "occurrence", "support",
"lowest_p", "highest_p", "non_Signif_Snw_Genes", "Up_regulated",
"Down_regulated", "all_pathway_genes", "num_genes_in_path", "Cluster", "Status")
if( length(intersect(expected_names, colnames(data))) < length(expected_names)) {
stop("The data is not the correct format")
}
#Preset for search conditions not used
if( is.null(clusters) ){
bycluster <- data %>% filter(ID == "NULL VALUE")
}
if( is.null(genes) ){
bygene <- data %>% filter(ID == "NULL VALUE")
}
if( is.null(pathways) ){
bypath <- data %>% filter(ID == "NULL VALUE")
}
#----
#______________DATA MANIPULATION____________
#----
#Change the all pathway gene lists generated by pathfindR to a list of individual gene names
data <- data %>%
mutate(gene_list = lapply(all_pathway_genes, function(x) trimws(unlist(strsplit(x, ",")))))
#Create separate dfs with hits for each search criteria
#CLUSTERS
if( ! is.null(clusters) ){
clusters <- clusters %>% as.numeric()
bycluster <- data %>% filter( Cluster %in% clusters)
}
#GENES
if( ! is.null(genes) ){
bygene <- data %>%
filter(map_lgl(gene_list, ~ any(.x %in% genes)))
}
#PATHWAYS
if( ! is.null(pathways) ){
bypath <- data %>%
filter(Term_Description %in% pathways)
}
#Remake larger data frame with all hits distinctively
hits <- rbind(bycluster, bygene, bypath) %>% distinct()
#Default for no hits
if( nrow(hits) < 1){
#Show the first 10 clusters
hits <- subset(data, Cluster %in% 1:10)
}
#----
#______________CREATE THE PLOT______________
print(hits)
plot <- enrichment_chart2(hits, plot_by_cluster = TRUE)
print(plot)
hits <- hits %>% mutate(log_p = -log10(lowest_p))
plot <- ggplotly(plot)
plot <- style(
plot,
marker = list(
color = hits$log_p,                # Assign color to log_p values
size = hits$num_genes_in_path,     # Assign size to num_genes_in_path values
colorscale = 'RdYlBu',             # Set the color scale
sizemode = 'diameter',             # Define how the size is applied
showscale = TRUE                   # Show the color scale legend
),
traces = 1  # Apply to the first trace (adjust if necessary)
)
}
plot <- enricher1(res_clustered, NULL, NULL, NULL)
saveWidget(plot, 'plot.html')
browseURL('plot.html')
print(enricher(res_clustered))
setwd("C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny")
shiny::runApp('App')
runApp('App')
