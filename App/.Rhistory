legend.margin = margin(15, 15, 15, 15, "pt"),
plot.title = element_text(color='black', size=30, margin=margin(20,20,5,10,"pt")),
plot.subtitle = element_text(color='black', size=20, margin=margin(5,5,15,10,"pt")),
plot.caption = element_text(color='black', size=15, margin=margin(10, 10, 10, 10, "pt")),
aspect.ratio = 1) +
coord_fixed()
#Change size of points according to present number of variables
if(a >= 4){
pca_plot <- pca_plot + scale_size_discrete(range = c(3, 10)) + geom_point()
}else{
pca_plot <- pca_plot + geom_point(size=4)
}
x
}
conditions <- c('condition', 'batch')
plotGeneCounts(data, meta, conditions)
plotGeneCounts <- function(gene, metadata, conditions){
name <- (gene %>% select(gene_name))[1]
id <- (gene %>% select(gene_id))[1]
p <- (gene %>% select(padj))[1]
fold <- (gene %>% select(log2FoldChange))[1]
counts <- (gene[,5:ncol(gene)])
mean <- mean(as.numeric(counts))
toplot <- metadata %>% mutate(counts = data.frame(t(counts))[,1])
print(toplot)
print("_____________________")
cond <- intersect(conditions, colnames(metadata))
print(cond)
if(is.null(cond) || length(cond) <= 0){
print("select a factor")
return()
}
aesthetics <- aes(x = as.factor(toplot[[cond[1]]]) , y = toplot$counts)
a <- length(cond)
if(a >= 2){
aesthetics$colour = as.factor(toplot[[cond[2]]])
}
if(a >= 3){
aesthetics$shape = as.factor(toplot[[cond[3]]])
}
if(a >= 4){
aesthetics$size = as.factor(toplot[[cond[4]]])
}
x <- ggplot(toplot, aesthetics) +
xlab(cond[1]) +
ylab("Count") +
theme_minimal() +
labs(title = name,
subtitle = paste("Mean Count: ",mean, "   Padj: ", p ),
caption = "caption",
color = if (a >= 2) cond[2] else NULL,
shape = if (a >= 3) cond[3] else NULL,
size = if (a >= 4) cond[4] else NULL
) +
theme(plot.margin = margin(10, 10, 10, 10, "pt"),
axis.title.x = element_text(color='black', size = 20, margin = margin(15, 15, 15, 15, "pt")),
axis.title.y = element_text(color='black', size=20, margin = margin(15, 15, 15, 15, "pt")),
axis.text.y = element_text(color='black', size=15),
axis.text.x = element_text(color='black', size=15),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
axis.line.x = element_line(color='grey'),
axis.line.y = element_line(color='grey'),
legend.text = element_text(color='black', size=20),
legend.title = element_text(color='black', size=20),
legend.margin = margin(15, 15, 15, 15, "pt"),
plot.title = element_text(color='black', size=30, margin=margin(20,20,5,10,"pt")),
plot.subtitle = element_text(color='black', size=20, margin=margin(5,5,15,10,"pt")),
plot.caption = element_text(color='black', size=15, margin=margin(10, 10, 10, 10, "pt")),
aspect.ratio = 1) +
coord_fixed()
#Change size of points according to present number of variables
if(a >= 4){
x <- x + scale_size_discrete(range = c(3, 10)) + geom_point()
}else{
x <- x + geom_point(size=4)
}
x
}
conditions <- c('condition', 'batch')
plotGeneCounts(data, meta, conditions)
plotGeneCounts <- function(gene, metadata, conditions){
name <- (gene %>% select(gene_name))[1]
id <- (gene %>% select(gene_id))[1]
p <- (gene %>% select(padj))[1]
fold <- (gene %>% select(log2FoldChange))[1]
counts <- (gene[,5:ncol(gene)])
mean <- mean(as.numeric(counts))
toplot <- metadata %>% mutate(counts = data.frame(t(counts))[,1])
print(toplot)
print("_____________________")
cond <- intersect(conditions, colnames(metadata))
print(cond)
if(is.null(cond) || length(cond) <= 0){
print("select a factor")
return()
}
aesthetics <- aes(x = as.factor(toplot[[cond[1]]]) , y = toplot$counts)
a <- length(cond)
if(a >= 2){
aesthetics$colour = as.factor(toplot[[cond[2]]])
}
if(a >= 3){
aesthetics$shape = as.factor(toplot[[cond[3]]])
}
if(a >= 4){
aesthetics$size = as.factor(toplot[[cond[4]]])
}
x <- ggplot(toplot, aesthetics) +
xlab(cond[1]) +
ylab("Count") +
theme_minimal() +
labs(title = name,
subtitle = paste("Fold Change: ", fold),
caption = paste("Mean Count: ",mean, "   Padj: ", p ),
color = if (a >= 2) cond[2] else NULL,
shape = if (a >= 3) cond[3] else NULL,
size = if (a >= 4) cond[4] else NULL
) +
theme(plot.margin = margin(10, 10, 10, 10, "pt"),
axis.title.x = element_text(color='black', size = 20, margin = margin(15, 15, 15, 15, "pt")),
axis.title.y = element_text(color='black', size=20, margin = margin(15, 15, 15, 15, "pt")),
axis.text.y = element_text(color='black', size=15),
axis.text.x = element_text(color='black', size=15),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
axis.line.x = element_line(color='grey'),
axis.line.y = element_line(color='grey'),
legend.text = element_text(color='black', size=20),
legend.title = element_text(color='black', size=20),
legend.margin = margin(15, 15, 15, 15, "pt"),
plot.title = element_text(color='black', size=30, margin=margin(20,20,5,10,"pt")),
plot.subtitle = element_text(color='black', size=20, margin=margin(5,5,15,10,"pt")),
plot.caption = element_text(color='black', size=15, margin=margin(10, 10, 10, 10, "pt")),
aspect.ratio = 1) +
coord_fixed()
#Change size of points according to present number of variables
if(a >= 4){
x <- x + scale_size_discrete(range = c(3, 10)) + geom_point()
}else{
x <- x + geom_point(size=4)
}
x
}
conditions <- c('condition', 'batch', 'time', 'cell')
plotGeneCounts(data, meta, conditions)
plotGeneCounts <- function(gene, metadata, conditions){
name <- (gene %>% select(gene_name))[1]
id <- (gene %>% select(gene_id))[1]
p <- (gene %>% select(padj))[1]
fold <- (gene %>% select(log2FoldChange))[1]
counts <- (gene[,5:ncol(gene)])
mean <- round(mean(as.numeric(counts)))
toplot <- metadata %>% mutate(counts = data.frame(t(counts))[,1])
print(toplot)
print("_____________________")
cond <- intersect(conditions, colnames(metadata))
print(cond)
if(is.null(cond) || length(cond) <= 0){
print("select a factor")
return()
}
aesthetics <- aes(x = as.factor(toplot[[cond[1]]]) , y = toplot$counts)
a <- length(cond)
if(a >= 2){
aesthetics$colour = as.factor(toplot[[cond[2]]])
}
if(a >= 3){
aesthetics$shape = as.factor(toplot[[cond[3]]])
}
if(a >= 4){
aesthetics$size = as.factor(toplot[[cond[4]]])
}
x <- ggplot(toplot, aesthetics) +
xlab(cond[1]) +
ylab("Count") +
theme_minimal() +
labs(title = name,
subtitle = paste("Fold Change: ", fold),
caption = paste("Mean Count: ",mean, "   Padj: ", p ),
color = if (a >= 2) cond[2] else NULL,
shape = if (a >= 3) cond[3] else NULL,
size = if (a >= 4) cond[4] else NULL
) +
theme(plot.margin = margin(10, 10, 10, 10, "pt"),
axis.title.x = element_text(color='black', size = 20, margin = margin(15, 15, 15, 15, "pt")),
axis.title.y = element_text(color='black', size=20, margin = margin(15, 15, 15, 15, "pt")),
axis.text.y = element_text(color='black', size=15),
axis.text.x = element_text(color='black', size=15),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
axis.line.x = element_line(color='grey'),
axis.line.y = element_line(color='grey'),
legend.text = element_text(color='black', size=20),
legend.title = element_text(color='black', size=20),
legend.margin = margin(15, 15, 15, 15, "pt"),
plot.title = element_text(color='black', size=30, margin=margin(20,20,5,10,"pt")),
plot.subtitle = element_text(color='black', size=20, margin=margin(5,5,15,10,"pt")),
plot.caption = element_text(color='black', size=15, margin=margin(10, 10, 10, 10, "pt")),
aspect.ratio = 1) +
coord_fixed()
#Change size of points according to present number of variables
if(a >= 4){
x <- x + scale_size_discrete(range = c(3, 10)) + geom_point()
}else{
x <- x + geom_point(size=4)
}
x
}
conditions <- c('condition', 'batch', 'time', 'cell')
plotGeneCounts(data, meta, conditions)
plotGeneCounts <- function(gene, metadata, conditions){
name <- (gene %>% select(gene_name))[1]
id <- (gene %>% select(gene_id))[1]
p <- (gene %>% select(padj))[1]
fold <- (gene %>% select(log2FoldChange))[1]
counts <- (gene[,5:ncol(gene)])
mean <- round(mean(as.numeric(counts)))
toplot <- metadata %>% mutate(counts = data.frame(t(counts))[,1])
print(toplot)
print("_____________________")
cond <- intersect(conditions, colnames(metadata))
print(cond)
if(is.null(cond) || length(cond) <= 0){
print("select a factor")
return()
}
aesthetics <- aes(x = as.factor(toplot[[cond[1]]]) , y = toplot$counts)
a <- length(cond)
if(a >= 2){
aesthetics$colour = as.factor(toplot[[cond[2]]])
}
if(a >= 3){
aesthetics$shape = as.factor(toplot[[cond[3]]])
}
if(a >= 4){
aesthetics$size = as.factor(toplot[[cond[4]]])
}
x <- ggplot(toplot, aesthetics) +
xlab(cond[1]) +
ylab("Count") +
theme_minimal() +
labs(title = name,
subtitle = paste("Fold Change: ", fold),
caption = paste("Mean Count: ",mean, "   Padj: ", p ),
color = if (a >= 2) cond[2] else NULL,
shape = if (a >= 3) cond[3] else NULL,
size = if (a >= 4) cond[4] else NULL
) +
theme(plot.margin = margin(10, 10, 10, 10, "pt"),
axis.title.x = element_text(color='black', size = 20, margin = margin(15, 15, 15, 15, "pt")),
axis.title.y = element_text(color='black', size=20, margin = margin(15, 15, 15, 15, "pt")),
axis.text.y = element_text(color='black', size=15),
axis.text.x = element_text(color='black', size=15),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
axis.line.x = element_line(color='grey'),
axis.line.y = element_line(color='grey'),
legend.text = element_text(color='black', size=20),
legend.title = element_text(color='black', size=20),
legend.margin = margin(15, 15, 15, 15, "pt"),
plot.title = element_text(color='black', size=30, margin=margin(20,20,5,10,"pt")),
plot.subtitle = element_text(color='black', size=20, margin=margin(5,5,15,10,"pt")),
plot.caption = element_text(color='black', size=15, margin=margin(10, 10, 10, 10, "pt")),
aspect.ratio = 1) +
coord_fixed()
#Change size of points according to present number of variables
if(a >= 4){
x <- x + scale_size_discrete(range = c(3, 10)) + geom_point()
}else{
x <- x + geom_point(size=4)
}
return(x)
}
conditions <- c('condition', 'batch', 'time', 'cell')
plot <- plotGeneCounts(data, meta, conditions)
plot
View(plot)
shiny::runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
volcano <- ggplot(deg, aes(x = log2FoldChange, y = -log10(padj), color = ex, label = delabel)) +
geom_point(size=2) +
geom_text_repel(max.overlaps = Inf, na.rm=TRUE)+
scale_x_continuous(breaks = seq(-20, 20, 2)) +
scale_y_continuous(expand = expansion(mult = c(0, 0.5))) +
scale_color_manual(values = c("DOWN" = "#2171b5", "NO" = "grey", "UP" = "#bb0c00"),
labels = c("DOWN" = "Downregulated",
"NO" = "Not significant",
"UP" = "Upregulated")
) +
geom_vline(xintercept = c(lowcut, highcut), color='black', linetype = 'dashed')+
geom_hline(yintercept= -log10(pcut), color='black', linetype='dashed') +
labs(color = 'Genes',
x = expression("logFC"),
y = expression("-log"[10]*"p-value")) +
labs(title = title,
subtitle = subtitle,
caption = caption) +
theme_minimal() +
theme(plot.margin = margin(10, 10, 10, 10, "pt"),
axis.title.x = element_text(color='black', size = 20, margin = margin(15, 15, 15, 15, "pt")),
axis.title.y = element_text(color='black', size=20, margin = margin(15, 15, 15, 15, "pt")),
axis.text.y = element_text(color='black', size=15),
axis.text.x = element_text(color='black', size=15),
axis.line.x = element_line(color='grey'),
axis.line.y = element_line(color='grey'),
legend.text = element_text(color='black', size=20),
legend.title = element_text(color='black', size=20),
legend.margin = margin(15, 15, 15, 15, "pt"),
plot.title = element_text(color='black', size=30, margin=margin(20,20,5,10,"pt")),
plot.subtitle = element_text(color='black', size=20, margin=margin(5,5,15,10,"pt")),
plot.caption = element_text(color='black', size=15, margin=margin(10, 10, 10, 10, "pt"))
) +
geom_point(data = interest_gene,
aes(x = log2FoldChange, y = -log10(padj)),
color='green',
size=2,
show.legend = FALSE) +
geom_text_repel(data = interest_gene,
aes(x = log2FoldChange,
y = -log10(padj),
label = gene_name),
color='green',
show.legend = FALSE)
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
volcano <- ggplot(deg, aes(x = log2FoldChange, y = -log10(padj), color = ex, label = delabel)) +
geom_point(size=2) +
geom_text_repel(max.overlaps = Inf, na.rm=TRUE)+
scale_x_continuous(breaks = seq(-35, 35, 2)) +
scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
coord_cartesian() +
scale_color_manual(values = c("DOWN" = "#2171b5", "NO" = "grey", "UP" = "#bb0c00"),
labels = c("DOWN" = "Downregulated",
"NO" = "Not significant",
"UP" = "Upregulated")
) +
geom_vline(xintercept = c(lowcut, highcut), color='black', linetype = 'dashed')+
geom_hline(yintercept= -log10(pcut), color='black', linetype='dashed') +
labs(color = 'Genes',
x = expression("logFC"),
y = expression("-log"[10]*"p-value")) +
labs(title = title,
subtitle = subtitle,
caption = caption) +
theme_minimal() +
theme(plot.margin = margin(10, 10, 10, 10, "pt"),
axis.title.x = element_text(color='black', size = 20, margin = margin(15, 15, 15, 15, "pt")),
axis.title.y = element_text(color='black', size=20, margin = margin(15, 15, 15, 15, "pt")),
axis.text.y = element_text(color='black', size=15),
axis.text.x = element_text(color='black', size=15),
axis.line.x = element_line(color='grey'),
axis.line.y = element_line(color='grey'),
legend.text = element_text(color='black', size=20),
legend.title = element_text(color='black', size=20),
legend.margin = margin(15, 15, 15, 15, "pt"),
plot.title = element_text(color='black', size=30, margin=margin(20,20,5,10,"pt")),
plot.subtitle = element_text(color='black', size=20, margin=margin(5,5,15,10,"pt")),
plot.caption = element_text(color='black', size=15, margin=margin(10, 10, 10, 10, "pt"))
) +
geom_point(data = interest_gene,
aes(x = log2FoldChange, y = -log10(padj)),
color='lawngreen',
size=3,
show.legend = FALSE) +
geom_text_repel(data = interest_gene,
aes(x = log2FoldChange,
y = -log10(padj),
label = gene_name),
color='mediumseagreen',
show.legend = FALSE)
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
runApp('C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny/App')
setwd("C:/Users/lucas/RStudio Projects")
setwd("C:/Users/lucas/VBRN 2024/RNAseq_R_Shiny")
shiny::runApp('App')
#~~~~~~~~~~~~~~~~~~~~~~~~~~#
#-------plot gene count----#
#~~~~~~~~~~~Func~~~~~~~~~~~#
#Takes a single row with a gene name, id, foldchange, and padj
#metadata file, and conditions to view
#returns a plot with the counts as y value and other conditions suplementing
plotGeneCounts <- function(gene, metadata, conditions){
name <- (gene %>% select(gene_name))[1]
id <- (gene %>% select(gene_id))[1]
p <- format((gene %>% select(padj))[1], scientific = TRUE, digits = 8)
fold <- round((gene %>% select(log2FoldChange))[1], digits=8)
counts <- (gene[,5:ncol(gene)])
mean <- round(mean(as.numeric(counts)))
if(is.null(metadata)){
return()
}
toplot <- metadata %>% mutate(counts = data.frame(t(counts))[,1])
print(toplot)
print("_____________________")
cond <- intersect(conditions, colnames(metadata))
if(is.null(cond) || length(cond) <= 0){
print("select a factor")
return()
}
aesthetics <- aes(x = as.factor(toplot[[cond[1]]]) , y = toplot$counts)
a <- length(cond)
if(a >= 2){
aesthetics$colour = as.factor(toplot[[cond[2]]])
}
if(a >= 3){
aesthetics$shape = as.factor(toplot[[cond[3]]])
}
if(a >= 4){
aesthetics$size = as.factor(toplot[[cond[4]]])
}
x <- ggplot(toplot, aesthetics) +
xlab(cond[1]) +
ylab("Count") +
theme_minimal() +
labs(title = name,
subtitle = paste("Fold Change: ", fold),
caption = paste("Mean Count: ",mean, "   Padj: ", p ),
color = if (a >= 2) cond[2] else NULL,
shape = if (a >= 3) cond[3] else NULL,
size = if (a >= 4) cond[4] else NULL
) +
theme(plot.margin = margin(3, 2, 2, 2, "pt"),
axis.title.x = element_text(color='black', size = 15, margin = margin(2, 2,2, 2, "pt")),
axis.title.y = element_text(color='black', size=15, margin = margin(2, 2, 2, 2, "pt")),
axis.text.y = element_text(color='black', size=15),
axis.text.x = element_text(color='black', size=15),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
axis.line.x = element_line(color='grey'),
axis.line.y = element_line(color='grey'),
legend.text = element_text(color='black', size=20),
legend.title = element_text(color='black', size=20),
legend.margin = margin(2, 2, 2, 2, "pt"),
plot.title = element_text(color='black', size=20, margin=margin(2,2,2,2,"pt")),
plot.subtitle = element_text(color='black', size=15, margin=margin(2,2,5,2,"pt")),
plot.caption = element_text(color='black', size=10, margin=margin(2, 80, 2, 1, "pt")),
)
#Change size of points according to present number of variables
if(a >= 4){
x <- x + scale_size_discrete(range = c(3, 10)) + geom_beeswarm(cex = 3)
}else{
x <- x + geom_beeswarm(size=3, cex = 3)
}
return(x)
}
runApp('App')
runApp('App')
runApp('App')
devtools::install_github("LMilazzo/BioVis")
shiny::runApp('App')
shiny::runApp('App')
devtools::reload("BioVis")
shiny::runApp()
devtools::install_github("LMilazzo/BioVis")
devtools::install_github("LMilazzo/BioVis", force=TRUE)
ls("package:BioVis")
detach("package:BioVis", unload = TRUE)
devtools::install_github("LMilazzo/BioVis", force=TRUE)
ls("package:BioVis")
library(BioVis)
ls("package:BioVis")
detach("package:BioVis", unload = TRUE)
ls("package:BioVis")
ls("package:BioVis")
devtools::install()
devtools::install_github("LMilazzo/BioVis")
ls("package:BioVis")
detach("package:BioVis", unload = TRUE)
devtools::install_github("LMilazzo/BioVis")
devtools::install_github("LMilazzo/BioVis", force=TRUE)
ls("package:BioVis")
library(BioVis)
ls("package:BioVis")
shiny::runApp()
