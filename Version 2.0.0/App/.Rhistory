Stat <- c("Speed", "Attack", "Charisma", "Defense")
Val <- c(  90,       60,        75,         35   )
Data <- data.frame("Stat"  = Stat, "Val" = Val)
#This data frame represents the data to be put in the chart, however it is not complete
Data
Data$min <- 0
Data$max <- 100
#Make sure your min and max are first two columns
#In this example I can just flip my data horizontally
Data <- Data[,nrow(Data):1] %>% tibble::column_to_rownames("Stat")
#This data frame now has all the neccessary data to make the chart
Data
#It is in the wrong orientation because unlike ggplot the fmsb radar
#chart function takes each category its own column
Data <- Data %>% t() %>% data.frame()
class(Data)
Data
radarchart(Data)
#Elden Ring Stat Example
CharStats <- c("Vigor", "Mind", "Endurance", "Strength", "Dexterity", "Intelligence", "Faith", "Arcane")
#Here I have the Stat line for a decent level 120 strength build.
CurrentLevel <- 120
StatValues <- c(35, 20, 20, 45, 40, 10, 14, 15)
#Here I save the minimum state values for the vagabond class character
#Also the Starting stat (The vagabond starts at level 9)
StartingClassLevel <- 9
minStats <- c(15, 10, 11, 14, 13, 9, 9, 7)
#The max stats are a little more complicated, the max stat of any
#stat for a character is equal to the startStat + (level - startLevel)
maxStats <- minStats + (120 - StartingClassLevel)
#Create the Data Frame
StrengthCharacterBuild <- data.frame("max" = maxStats, "min" = minStats, "stats" = StatValues) %>%
#Change the max to the maximum stat for easier diffrentiation between values
mutate(max = max(StatValues))
rownames(StrengthCharacterBuild) <- CharStats
#Transform sideways
StrengthCharacterBuild <- StrengthCharacterBuild %>% t() %>% data.frame()
#Basic plot
radarchart(StrengthCharacterBuild)
#Now lets make it look a little nicer
radarchart(
StrengthCharacterBuild,
pty = 16,
plty = 1,
cglty = 1,
cglcol = "grey",
title = "Character Stats",
pfcol = c(rgb(78/255, 65/255, 56/255, 0.75)),
pcol = c("black")
)
#Elden Ring Stat Example
CharStats <- c("Vigor", "Mind", "Endurance", "Strength", "Dexterity", "Intelligence", "Faith", "Arcane")
#Here I have the Stat line for a decent level 120 strength build.
CurrentLevel <- 120
StatValues <- c(35, 20, 20, 45, 40, 10, 14, 15)
#Here I save the minimum state values for the vagabond class character
#Also the Starting stat (The vagabond starts at level 9)
StartingClassLevel <- 9
minStats <- c(15, 10, 11, 14, 13, 9, 9, 7)
#The max stats are a little more complicated, the max stat of any
#stat for a character is equal to the startStat + (level - startLevel)
maxStats <- minStats + (120 - StartingClassLevel)
#Create the Data Frame
StrengthCharacterBuildTrimmed <- data.frame("max" = maxStats, "min" = minStats, "stats" = StatValues) %>%
#Change the max to the maximum stat for easier diffrentiation between values
mutate(max = max(StatValues))
rownames(StrengthCharacterBuildTrimmed) <- CharStats
#Transform sideways
StrengthCharacterBuildTrimmed <- StrengthCharacterBuildTrimmed %>% t() %>% data.frame()
#Basic plot
radarchart(StrengthCharacterBuildTrimmed)
#Now lets make it look a little nicer
radarchart(
StrengthCharacterBuildNoTrim,
pty = 16,
plty = 1,
cglty = 1,
cglcol = "grey",
title = "Character Stats",
pfcol = c(rgb(78/255, 65/255, 56/255, 0.75)),
pcol = c("black")
)
StrengthCharacterBuildNoTrim <- data.frame("max" = maxStats, "min" = minStats, "stats" = StatValues) %>%
#Change the max to the maximum stat for easier diffrentiation between values
mutate(max = max(StatValues))
#Now lets make it look a little nicer
radarchart(
StrengthCharacterBuildNoTrim,
pty = 16,
plty = 1,
cglty = 1,
cglcol = "grey",
title = "Character Stats",
pfcol = c(rgb(78/255, 65/255, 56/255, 0.75)),
pcol = c("black")
)
library(ggplot2)
library(gganimate)
install.packages("gganimate")
library(gganimate)
# Parameters
n_frames <- 100
box_size <- 10
word <- "Hello!"
# Generate bouncing path
set.seed(123)
x <- cumsum(sample(c(-1, 1), n_frames, replace = TRUE))
y <- cumsum(sample(c(-1, 1), n_frames, replace = TRUE))
# Keep within bounds
x <- (x - min(x)) / (max(x) - min(x)) * box_size
y <- (y - min(y)) / (max(y) - min(y)) * box_size
# Reflect off walls
reflect <- function(v, max_val) {
for (i in seq_along(v)) {
if (v[i] < 0 || v[i] > max_val) {
v[i] <- max_val - abs(v[i] %% (2 * max_val) - max_val)
}
}
return(v)
}
x <- reflect(x, box_size)
y <- reflect(y, box_size)
# Create data frame
df <- data.frame(
frame = 1:n_frames,
x = x,
y = y,
label = word
)
# Plot
p <- ggplot(df, aes(x, y, label = label)) +
geom_text(size = 10, color = "deepskyblue4") +
coord_fixed(xlim = c(0, box_size), ylim = c(0, box_size), expand = FALSE) +
theme_void() +
theme(panel.border = element_rect(colour = "black", fill = NA)) +
transition_time(frame) +
ease_aes('linear')
# Animate
animate(p, fps = 15, width = 400, height = 400, renderer = gifski_renderer())
# Parameters
n_frames <- 200
box_size <- 10
word <- "DVD"
# Parameters
n_frames <- 200
box_size <- 10
word <- "DVD"
# Initial position and velocity
x <- numeric(n_frames)
y <- numeric(n_frames)
vx <- 0.1
vy <- 0.08
x[1] <- runif(1, 1, box_size - 1)
y[1] <- runif(1, 1, box_size - 1)
# Simulate movement
for (i in 2:n_frames) {
x[i] <- x[i-1] + vx
y[i] <- y[i-1] + vy
# Reflect off walls
if (x[i] <= 0 || x[i] >= box_size) {
vx <- -vx
x[i] <- x[i-1] + vx
}
if (y[i] <= 0 || y[i] >= box_size) {
vy <- -vy
y[i] <- y[i-1] + vy
}
}
# Data frame
df <- data.frame(frame = 1:n_frames, x = x, y = y, label = word)
# Plot
p <- ggplot(df, aes(x, y, label = label)) +
geom_text(size = 12, color = "magenta3", fontface = "bold") +
coord_fixed(xlim = c(0, box_size), ylim = c(0, box_size), expand = FALSE) +
theme_void() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 2)) +
transition_time(frame) +
ease_aes('linear')
# Animate
animate(p, fps = 30, width = 400, height = 400, renderer = gifski_renderer())
# Animate
animate(p, fps = 30, width = 400, height = 400, renderer = gifski_renderer())
# Animate
animate(p, fps = 60, width = 600, height = 600, renderer = gifski_renderer())
# Animate
animate(p, fps = 10, width = 600, height = 600, renderer = gifski_renderer())
library(ggplot2)
library(gganimate)
# Parameters
n_frames <- 400  # More frames for slower animation
box_size <- 10
word <- "DVD"
# Initial position and velocity
x <- numeric(n_frames)
y <- numeric(n_frames)
vx <- 0.05  # Slower velocity for smoother movement
vy <- 0.04  # Slower vertical velocity
x[1] <- runif(1, 1, box_size - 1)
y[1] <- runif(1, 1, box_size - 1)
# Simulate movement with more frames
for (i in 2:n_frames) {
x[i] <- x[i-1] + vx
y[i] <- y[i-1] + vy
# Reflect off walls
if (x[i] <= 0 || x[i] >= box_size) {
vx <- -vx
x[i] <- x[i-1] + vx
}
if (y[i] <= 0 || y[i] >= box_size) {
vy <- -vy
y[i] <- y[i-1] + vy
}
}
# Data frame
df <- data.frame(frame = 1:n_frames, x = x, y = y, label = word)
# Plot
p <- ggplot(df, aes(x, y, label = label)) +
geom_text(size = 12, color = "magenta3", fontface = "bold") +
coord_fixed(xlim = c(0, box_size), ylim = c(0, box_size), expand = FALSE) +
theme_void() +
theme(panel
library(ggplot2)
library(ggplot2)
library(gganimate)
# Parameters
n_frames <- 400  # More frames for slower animation
box_size <- 10
word <- "DVD"
# Initial position and velocity
x <- numeric(n_frames)
y <- numeric(n_frames)
vx <- 0.05  # Slower velocity for smoother movement
vy <- 0.04  # Slower vertical velocity
x[1] <- runif(1, 1, box_size - 1)
y[1] <- runif(1, 1, box_size - 1)
# Simulate movement with more frames
for (i in 2:n_frames) {
x[i] <- x[i-1] + vx
y[i] <- y[i-1] + vy
# Reflect off walls
if (x[i] <= 0 || x[i] >= box_size) {
vx <- -vx
x[i] <- x[i-1] + vx
}
if (y[i] <= 0 || y[i] >= box_size) {
vy <- -vy
y[i] <- y[i-1] + vy
}
}
# Data frame
df <- data.frame(frame = 1:n_frames, x = x, y = y, label = word)
# Plot
p <- ggplot(df, aes(x, y, label = label)) +
geom_text(size = 12, color = "magenta3", fontface = "bold") +
coord_fixed(xlim = c(0, box_size), ylim = c(0, box_size), expand = FALSE) +
theme_void() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 2)) +
transition_time(frame) +
ease_aes('linear')
# Animate
animate(p, fps = 15, width = 400, height = 400, renderer = gifski_renderer())
word <- "Waiting For Data"
# Initial position and velocity
x <- numeric(n_frames)
y <- numeric(n_frames)
vx <- 0.05  # Slower velocity for smoother movement
vy <- 0.04  # Slower vertical velocity
x[1] <- runif(1, 1, box_size - 1)
y[1] <- runif(1, 1, box_size - 1)
# Simulate movement with more frames
for (i in 2:n_frames) {
x[i] <- x[i-1] + vx
y[i] <- y[i-1] + vy
# Reflect off walls
if (x[i] <= 0 || x[i] >= box_size) {
vx <- -vx
x[i] <- x[i-1] + vx
}
if (y[i] <= 0 || y[i] >= box_size) {
vy <- -vy
y[i] <- y[i-1] + vy
}
}
# Data frame
df <- data.frame(frame = 1:n_frames, x = x, y = y, label = word)
# Plot
p <- ggplot(df, aes(x, y, label = label)) +
geom_text(size = 12, color = "magenta3", fontface = "bold") +
coord_fixed(xlim = c(0, box_size), ylim = c(0, box_size), expand = FALSE) +
theme_void() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 2)) +
transition_time(frame) +
ease_aes('linear')
# Animate
animate(p, fps = 15, width = 400, height = 400, renderer = gifski_renderer())
# Animate
animate(p, fps = 15, width = 400, height = 400, renderer = gifski_renderer())
# Simulate movement with more frames
for (i in 2:n_frames) {
x[i] <- x[i-1] + vx
y[i] <- y[i-1] + vy
# Reflect off walls
if (x[i] <= 0 || x[i] >= box_size) {
vx <- -vx
x[i] <- x[i-1] + vx
}
if (y[i] <= 0 || y[i] >= box_size) {
vy <- -vy
y[i] <- y[i-1] + vy
}
}
# Data frame
df <- data.frame(frame = 1:n_frames, x = x, y = y, label = word)
# Plot
p <- ggplot(df, aes(x, y, label = label)) +
geom_text(size = 12, color = "magenta3", fontface = "bold") +
coord_fixed(xlim = c(0, box_size), ylim = c(0, box_size), expand = FALSE) +
theme_void() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 2)) +
transition_time(frame) +
ease_aes('linear')
# Animate
animate(p, fps = 15, width = 600, height = 600, renderer = gifski_renderer())
box_size <- 100
word <- "Waiting For Data"
# Initial position and velocity
x <- numeric(n_frames)
y <- numeric(n_frames)
vx <- 0.05  # Slower velocity for smoother movement
vy <- 0.04  # Slower vertical velocity
x[1] <- runif(1, 1, box_size - 1)
y[1] <- runif(1, 1, box_size - 1)
# Simulate movement with more frames
for (i in 2:n_frames) {
x[i] <- x[i-1] + vx
y[i] <- y[i-1] + vy
# Reflect off walls
if (x[i] <= 0 || x[i] >= box_size) {
vx <- -vx
x[i] <- x[i-1] + vx
}
if (y[i] <= 0 || y[i] >= box_size) {
vy <- -vy
y[i] <- y[i-1] + vy
}
}
# Data frame
df <- data.frame(frame = 1:n_frames, x = x, y = y, label = word)
# Plot
p <- ggplot(df, aes(x, y, label = label)) +
geom_text(size = 10, color = "magenta3", fontface = "bold") +
coord_fixed(xlim = c(0, box_size), ylim = c(0, box_size), expand = FALSE) +
theme_void() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 2)) +
transition_time(frame) +
ease_aes('linear')
# Animate
animate(p, fps = 15, width = 600, height = 600, renderer = gifski_renderer())
# Parameters
n_frames <- 200
box_size <- 10
word <- "Searching..."
# Initial position and velocity
x <- numeric(n_frames)
y <- numeric(n_frames)
vx <- 0.1  # Slower velocity for smoother movement
vy <- 0.08  # Slower vertical velocity
x[1] <- runif(1, 1, box_size - 1)
y[1] <- runif(1, 1, box_size - 1)
# Simulate movement with more frames
for (i in 2:n_frames) {
x[i] <- x[i-1] + vx
y[i] <- y[i-1] + vy
# Reflect off walls
if (x[i] <= 0 || x[i] >= box_size) {
vx <- -vx
x[i] <- x[i-1] + vx
}
if (y[i] <= 0 || y[i] >= box_size) {
vy <- -vy
y[i] <- y[i-1] + vy
}
}
# Data frame
df <- data.frame(frame = 1:n_frames, x = x, y = y, label = word)
# Create plot with gganimate
p <- ggplot(df, aes(x, y, label = label)) +
geom_text(size = 14, color = "orange", fontface = "bold") +
coord_fixed(xlim = c(0, box_size), ylim = c(0, box_size), expand = FALSE) +
theme_void() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 2)) +
transition_time(frame) +
ease_aes('linear')
# Return animated plot
animate(p, fps = 20, width = 400, height = 400, renderer = gifski_renderer())
n_frames <- 200   # More frames for smooth animation
word <- "Searching..."
box_size <- 10
# Create a data frame for the animation
df <- data.frame(
frame = 1:n_frames,
x = rep(NA, n_frames),
y = rep(NA, n_frames),
label = word
)
# Animate the text moving in a smooth arc or sinusoidal motion
df$x <- 5 + 3 * sin(seq(0, 2*pi, length.out = n_frames))  # Smooth horizontal wave motion
df$y <- 5 + 3 * cos(seq(0, 2*pi, length.out = n_frames))  # Smooth vertical wave motion
# Create plot with gganimate
p <- ggplot(df, aes(x, y, label = label)) +
geom_text(size = 14, color = "deepskyblue4", fontface = "bold") +
coord_fixed(xlim = c(0, box_size), ylim = c(0, box_size), expand = FALSE) +
theme_void() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 2)) +
transition_time(frame) +
ease_aes('linear')
# Render animation
animate(p, fps = 20, width = 400, height = 400, renderer = gifski_renderer())
# Parameters
n_frames <- 300  # More frames for smooth animation
word <- "Searching..."
box_size <- 10  # Size of the plot (you can change this)
radius <- 3    # Radius of the rotation
# Create a data frame for the animation
df <- data.frame(
frame = 1:n_frames,
angle = seq(0, 2 * pi, length.out = n_frames),  # angle for rotation
label = word
)
# Calculate x, y positions based on the angle
df$x <- 5 + radius * cos(df$angle)  # Circular x-coordinate
df$y <- 5 + radius * sin(df$angle)  # Circular y-coordinate
# Generate color gradient for a dynamic effect
df$color <- scales::hue_pal()(n_frames)  # A smooth color gradient
# Create the plot
p <- ggplot(df, aes(x, y, label = label, color = color)) +
geom_text(size = 14, fontface = "bold") +
coord_fixed(xlim = c(0, box_size), ylim = c(0, box_size), expand = FALSE) +
theme_void() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 2)) +
transition_time(frame) +
ease_aes('linear')
# Render the animation
animate(p, fps = 20, width = 400, height = 400, renderer = gifski_renderer())
shiny::runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
shiny::runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
shiny::runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
shiny::runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
shiny::runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
shiny::runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
runApp('C:/Users/lucas/VBRN 2024/RNA-seq-Analysis-Tool/Version 2.0.0/App')
